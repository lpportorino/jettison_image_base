name: Build Jettison Base Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: jettison-base

jobs:
  build-binaries:
    name: Cross-compile Go Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Setup SSH keys for private submodules
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add deploy key for jettison_health
          echo "${{ secrets.PULL_HEALTH }}" > ~/.ssh/jettison_health
          chmod 600 ~/.ssh/jettison_health

          # Add deploy key for jettison_wrapp
          echo "${{ secrets.PULL_WRAPP }}" > ~/.ssh/jettison_wrapp
          chmod 600 ~/.ssh/jettison_wrapp

          # Configure SSH to use the appropriate key for each repo
          cat >> ~/.ssh/config <<EOF
          Host github.com-health
            HostName github.com
            User git
            IdentityFile ~/.ssh/jettison_health
            IdentitiesOnly yes

          Host github.com-wrapp
            HostName github.com
            User git
            IdentityFile ~/.ssh/jettison_wrapp
            IdentitiesOnly yes
          EOF

          chmod 600 ~/.ssh/config
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update submodule URLs to use SSH
        run: |
          git config --file=.gitmodules submodule.jettison_health.url git@github.com-health:lpportorino/jettison_health.git
          git config --file=.gitmodules submodule.jettison_wrapp.url git@github.com-wrapp:lpportorino/jettison_wrapp.git
          git submodule sync
          git submodule update --init --recursive

      - name: Cross-compile binaries with official Go image
        run: |
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            golang:latest \
            ./build-binaries.sh

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/
          retention-days: 1

  build-images:
    name: Build ${{ matrix.variant }} Image
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        variant: [ubuntu22, scratch]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/

      - name: Set executable permissions
        run: chmod +x bin/*/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.variant }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.variant }}
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }},ignore-error=true

      - name: Build test image for ARM64
        if: matrix.variant == 'ubuntu22'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.variant }}
          platforms: linux/arm64
          push: false
          load: true
          tags: test-image:${{ matrix.variant }}
          cache-from: type=gha,scope=${{ matrix.variant }}

      - name: Test Ubuntu image
        if: matrix.variant == 'ubuntu22'
        run: |
          IMAGE="test-image:ubuntu22"

          echo "=== Testing Ubuntu22 image ==="
          docker run --rm "$IMAGE" bash -c 'echo "✓ Container started"'

          echo "=== Verifying archer user ==="
          docker run --rm "$IMAGE" whoami | grep -q archer && echo "✓ archer user"

          echo "=== Checking tools ==="
          docker run --rm "$IMAGE" sh -c 'command -v wrapp' && echo "✓ wrapp"
          docker run --rm "$IMAGE" sh -c 'command -v jettison_health' && echo "✓ jettison_health"

          echo "=== Checking Ubuntu version ==="
          docker run --rm "$IMAGE" cat /etc/os-release | grep "22.04" && echo "✓ Ubuntu 22.04"

          echo "✓ All tests passed"
